#!/usr/bin/env bash

set -e

function realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

function check_prereqs() {
  if ! which mp3info >/dev/null 2>&1; then
    echo "Cannot find mp3info executable. Install it with:"
    echo
    echo "brew install mp3info"
    echo
    exit 1
  fi
}

function python_setup() {
  which virtualenv >/dev/null || pip3 install virtualenv
  [ -d ve ] || virtualenv ve --python=python3
  source ve/bin/activate
  pip install -r requirements.txt >/dev/null
}

# Usage:
if [[ $# != 2 ]] && [[ $# != 1 ]]; then
  echo
  echo "This script does the following after the audio file is edited:"
  echo "  1. Create the episode markdown file (with info from Trello)"
  echo "  2. Upload the mp3 to the server"
  echo
  echo "Usage: ./upload <audio-file> [<episode-date>]"
  echo
  echo "Example: ./upload /tmp/sse-112.mp3"
  echo "Example: ./upload /tmp/sse-112.mp3 2018-06-12"
  echo
  exit 1
fi

check_prereqs
python_setup

# Command line args:
mp3_file=$1
episode_date=$2

if [ -z "$episode_date" ]; then
  echo "Determining next episode date..."
  episode_date=$(./upcoming-monday-date)
  read -p "Enter the publication date: [$episode_date] "
  if [ -n "$REPLY" ]; then
    episode_date=$REPLY
  fi
fi

# Hack for Dave's Macs:
username=$(whoami)
if [ $username == "dasmithm" -o $username == "dsmith" ]; then # Dave's accounts
  username="dave"
fi

website_dir="$(realpath "$(dirname "$0")")"
byte_size=`ls -nl "$mp3_file" | awk '{print $5}'`
duration=`mp3info -p "%m:%02s" "$mp3_file"`
episode_number=`echo "$mp3_file" | perl -ne'/-(\d+)\.mp3/ && print $1'`
echo "Getting episode info from Trello for episode $episode_number ..."
./trello-check $episode_number
episode_title="$(./trello-episode-title $episode_number)"
episode_url_title="$(./trello-episode-url $episode_number)"
episode_question_text="$(./trello-episode-description $episode_number)"
uuid=`uuidgen | perl -ne 'print lc'`
prefixed_episode_number="$(printf '%03d' $episode_number)"
new_filename="sse-${prefixed_episode_number}.mp3"
episode_timestamp="$episode_date 12:00:00 -0700"
episode_markdown_file="$website_dir/_posts/$episode_date-episode-$episode_number-$episode_url_title.md"

if [ -e "$episode_markdown_file" ]; then
  echo
  echo "WARNING"
  echo "WARNING  The markdown file already exists: $episode_markdown_file"
  echo "WARNING  To be careful, this script won't overwrite it."
  echo "WARNING"
  echo
else
# Markdown file template:
cat << EOM > "$episode_markdown_file"
---
layout: post
title: "Episode $episode_number: $episode_title"
date: $episode_timestamp
guid: $uuid
duration: "$duration"
length: $byte_size
file: "https://dts.podtrac.com/redirect.mp3/download.softskills.audio/sse-$prefixed_episode_number.mp3"
categories: episode
enable_comments: true
---

In this episode, Dave and Jamison answer these questions:

$episode_question_text
EOM
fi

read -p "Upload mp3 file to server now? "
if [[ $REPLY =~ ^[Yy]$ ]]; then
  host="thesmithfam.org"
  dest_path="~/podcasts/${new_filename}"
  scp "$mp3_file" "$username@$host:$dest_path"
  ssh $username@$host "chmod 644 $dest_path"
fi
echo
echo

echo "Episode markdown has been created here:"
echo
echo $episode_markdown_file
echo
echo
cat "$episode_markdown_file"
echo
echo

read -p "Preview the file above. Add and push to github now? "
if [[ $REPLY =~ ^[Yy]$ ]]; then
  branch_name=episode-$prefixed_episode_number
  echo "Checking out the gh-pages branch, and creating pull request for new branch $branch_name"
  git checkout gh-pages --quiet
  git pull --quiet
  git checkout -b $branch_name --quiet
  git add "$episode_markdown_file"
  git commit -m "Episode $episode_number" --quiet
  git push origin $branch_name --quiet
  pull_request_url=$(./create-pull-request $episode_number)
  echo
  echo Merge this pull request when ready to publish:
  echo
  echo $pull_request_url
  echo
fi
echo
echo
