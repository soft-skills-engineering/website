#!/usr/bin/env bash

set -e

function realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

function check_prereqs() {
  if ! which mp3info >/dev/null 2>&1; then
    echo "Cannot find mp3info executable. Install it with:"
    echo
    echo "brew install mp3info"
    echo
    exit 1
  fi
}

function python_setup() {
  which virtualenv >/dev/null || pip3 install virtualenv
  [ -d ve ] || virtualenv ve --python=python3
  source ve/bin/activate
  pip install -r requirements.txt >/dev/null
}

function escape_yaml_quotes() {
  echo "$1" | sed -e 's/"/\\"/g'
}

# Usage:
if [[ $# != 2 ]] && [[ $# != 1 ]]; then
  echo
  echo "This script does the following after the audio file is edited:"
  echo "  1. Create the episode markdown file (with info from Trello)"
  echo "  2. Upload the mp3 to the server"
  echo
  echo "Usage: ./upload [--unattended] <audio-file> [<episode-date>]"
  echo
  echo "Example: ./upload /tmp/sse-112.mp3"
  echo "Example: ./upload /tmp/sse-112.mp3 2018-06-12"
  echo
  exit 1
fi

# Command line args:

is_unattened=false
if [ "$1" = "--unattended" ]; then
    is_unattended=true
    shift
fi

# Use `realpath` so we can `cd` later and still have this path refer to the same file
mp3_file="$(realpath "$1")"

# Should be something like YYYY-MM-DD (optional)
episode_date=$2

cd "$(dirname "$0")"
check_prereqs
python_setup

if [ -z "$episode_date" ]; then
  echo "Determining next episode date..."
  episode_date=$(./upcoming-monday-date)
  if [ "$is_unattended" = false ]; then
    read -p "Enter the publication date: [$episode_date] "
    if [ -n "$REPLY" ]; then
      if [ "$REPLY" == "y" ]; then
        true # no op -- keep the episode_date unchanged
      elif [[ $REPLY =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
        episode_date=$REPLY
      else
        echo "ERROR: Invalid date '$REPLY'"
        exit 1
      fi
    fi
  fi
fi

echo "Using episode date: $episode_date"

# Hack for Dave's Macs:
username=$(whoami)
if [ "$username" == "dasmithm" -o "$username" == "dsmith" ]; then # Dave's accounts
  username="dave"
fi
if [ "$username" == "j0d019y" ]; then # Jamison's accounts
  username="jergason"
fi

# This script is in the "scripts" directory:
byte_size=$(ls -nl "$mp3_file" | awk '{print $5}')
duration=$(mp3info -p "%m:%02s" "$mp3_file")
episode_number=$(echo "$mp3_file" | perl -ne'/-(\d+)\.mp3/ && print $1')
echo "Getting Trello info for episode $episode_number ..."
./trello-check "$episode_number"
episode_title="$(./trello-episode-title "$episode_number")"
episode_url_title="$(./trello-episode-url "$episode_number")"
episode_question_text="$(./trello-episode-description "$episode_number")"
uuid=$(uuidgen | perl -ne 'print lc')
prefixed_episode_number="$(printf '%03d' "$episode_number")"
new_filename="sse-${prefixed_episode_number}.mp3"
episode_timestamp="$episode_date 05:00:00 -0700"
episode_markdown_file="../_posts/$episode_date-episode-$episode_number-$episode_url_title.md"
episode_mp3_url="https://dts.podtrac.com/redirect.mp3/download.softskills.audio/sse-$prefixed_episode_number.mp3"

if [ -e "$episode_markdown_file" ]; then
  echo
  echo "WARNING"
  echo "WARNING  The markdown file already exists: $episode_markdown_file"
  echo "WARNING  To be careful, this script won't overwrite it."
  echo "WARNING"
  echo
else
# Markdown file template:
cat << EOM > "$episode_markdown_file"
---
layout: post
title: "Episode $episode_number: $(escape_yaml_quotes "$episode_title")"
date: $episode_timestamp
guid: $uuid
duration: "$duration"
length: $byte_size
file: "$episode_mp3_url"
categories: episode
enable_comments: true
---

In this episode, Dave and Jamison answer these questions:

$episode_question_text
EOM
fi

do_mp3_upload=false
if [ "$is_unattended" = false ]; then
  read -p "Upload mp3 file to server now? "
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    do_mp3_upload=true
  fi
else
  do_mp3_upload=true
fi

if [ "$do_mp3_upload" = true ]; then
  host="thesmithfam.org"
  dest_path="~/podcasts/${new_filename}"
  rsync -avP "$mp3_file" "$username@$host:$dest_path"
  ssh $username@$host "chmod 644 $dest_path"
  echo
  echo
fi


do_github=false
if [ "$is_unattended" = false ]; then
  echo "Episode markdown has been created here:"
  echo
  echo "$episode_markdown_file"
  echo
  echo
  cat "$episode_markdown_file"
  echo
  echo
  read -p "Preview the file above. Add and push to github now? "
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    do_github=true
  fi
else
  do_github=true
fi

if [ "$do_github" = true ]; then
  branch_name=episode-$prefixed_episode_number
  echo "Checking out the gh-pages branch, and creating pull request for new branch $branch_name"
  git checkout gh-pages --quiet
  git pull --quiet
  git checkout -b "$branch_name" --quiet
  git add "$episode_markdown_file"
  git commit -m "Episode $episode_number" --quiet
  git push origin "$branch_name" --quiet
  pull_request_url=$(./create-pull-request "$episode_number" "$episode_mp3_url")
  echo
  echo Merge this pull request when ready to publish:
  echo
  echo "$pull_request_url"
  echo
fi
